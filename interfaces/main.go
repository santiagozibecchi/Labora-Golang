package main


func main(){

}


// URL PRACTICA: https://www.notion.so/42b519d81813472d9ac34cf49cf29794?v=53c637d8207b48829132a80afb93eb95&p=a13c67bc8721462e9bce702ca66294b8&pm=c
/*
Ejercicio 1:

Se necesita generar dos secuencias de n√∫meros que sigan la siguiente l√≥gica

1. N√∫meros en orden crecientes (del 1 en adelante)
2. N√∫meros que sean primos (1,2,3,5,7,9,11‚Ä¶)

Se pide implementar cada secuencia en una struct que siga cumpla con la interfaz:
type IntSequence interface {

Next() int

}

Por √∫ltimo se pide desarrollar un peque√±o programa donde se pueda imprimir los primeros 30 n√∫meros de una de las dos secuencias seg√∫n una ‚Äútirada de dados‚Äù.

Tip: Podemos simular una tirada de dado usando rand.Intn(2) (del paquete math/rand).
*/

/*
Ejercicio 2:
Ahora se desea que se imprima un mensaje que diga cu√°l de las dos secuencias se tom√≥ (seg√∫n la tirada de dados).

TIP Se le puede declarar un m√©todo Title() string en la interface IntSequence y hacer que ambas secuencias lo implementen.
*/

/*
Ejercicio 3:

De forma m√°s general se desea tener una secuencia que me d√© n√∫meros que cumplan una condici√≥n (predicado).
Dicha condici√≥n ser√° implementada en estructuras (o cualquier otro tipo de dato)¬† que tengan el un m√©todo con la siguiente firma `Fulfill(n int) bool`.
 ***Fulfill*** es un t√©rmino en ingl√©s que com√∫nmente se emplea para afirmar que algo cumple una condici√≥n.
Adem√°s de tener tipos de datos que tengan una funci√≥n para implementar condiciones de:
N√∫meros cualquier sea (para secuencias de enteros lineales)
N√∫meros primos
Ahora quiero que agreguen un nuevo tipo que tenga una funci√≥n que implemente la condici√≥n de
N√∫meros pares (2,4,6‚Ä¶)
*/

/*
Ejercicio 4:

¬øQu√© pasar√≠a si quiero una secuencia pero en el orden inverso? ü§î. 
¬øAcaso es mucho pedir‚Ä¶? Creo que estoy teniendo sed de combinar dos capacidades: por un lado el orden en el que se generan los n√∫meros: 
creciente o decreciente y, por otro lado, un predicado que me diga si un n√∫mero cumple con tal condici√≥n.

Se desea implementar una estructura Sequence que tenga como campos un generador y un predicado y que tenga un m√©todo llamado Next()
que devuelva el pr√≥ximo n√∫mero que se genera usando el generador y que cumpla con el predicado.
*/

// Pair programming: Sistema de Almacenamiento de Documentos
// URL: https://www.notion.so/42b519d81813472d9ac34cf49cf29794?v=53c637d8207b48829132a80afb93eb95&p=6b755089e7f0430181ee94236c13e937&pm=c
